Iniciar dois servidores MongoDB em portas diferentes: 
Por padr√£o, o MongoDB roda na porta 27017, mas voc√™ pode iniciar outra inst√¢ncia em uma porta diferente (exemplo: 27018).

Linux/macOS (Terminal): mongod --port 27018 --dbpath /data/db2
-Se o diret√≥rio /data/db2 n√£o existir, crie-o antes:
-mkdir -p /data/db2

Windows (CMD ou PowerShell): mongod --port 27018 --dbpath C:\data\db2
-Se o diret√≥rio n√£o existir, crie-o antes:
-mkdir C:\data\db2

Agora, voc√™ ter√° dois servidores MongoDB rodando:
-mongodb://localhost:27017 ‚Üí Servidor A
-mongodb://localhost:27018 ‚Üí Servidor B

Verificar se os bancos de dados est√£o acess√≠veis
-Antes de rodar a migra√ß√£o, teste se voc√™ consegue conectar nos dois bancos:

Testar o MongoDB antigo (MONGO_URI_OLD): 
-mongosh "mongodb://localhost:27017"

Testar o MongoDB novo (MONGO_URI_NEW):
-mongosh "mongodb://localhost:27018"

Depois de conectar, execute:
-show dbs
-use servidor_A  # ou o nome do banco antigo
-show collections

Se voc√™ conseguir listar as cole√ß√µes, significa que a conex√£o est√° funcionando. Fa√ßa o mesmo para o novo banco.

Rodar o servidor:
-Execute o servidor para ver se ele inicia sem erros: npm run dev
-Se aparecer "Servidor rodando em http://localhost:3000", est√° tudo certo at√© aqui.

Testar a rota de usu√°rios:
-Use Postman, Insomnia ou cURL para chamar a rota de usu√°rios.

Usando cURL no terminal:
-curl -X POST http://localhost:3000/api/users (criar usu√°rio)
-curl -X GET http://localhost:3000/api/users (consultar todos usu√°rios)
-curl -X GET http://localhost:3000/api/users/:id (consultar 1 usu√°rio)
-curl -X PUT http://localhost:3000/api/users/:id (atualizar 1 usu√°rio)
-curl -X DELETE http://localhost:3000/api/users/:id (deletar 1 usu√°rio)

Postman/Insomnia:
-M√©todo: POST (criar usu√°rio)
-URL: http://localhost:3000/api/users
 
-M√©todo: GET (consultar todos usu√°rios)
-URL: http://localhost:3000/api/users 

-M√©todo: GET (consultar 1 usu√°rio)
-URL: http://localhost:3000/api/users/:id 

-M√©todo: PUT (atualizar 1 usu√°rio)
-URL: http://localhost:3000/api/users/:id 

-M√©todo: DELETE (deletar 1 usu√°rio)
-URL: http://localhost:3000/api/users/:id 

Testar a rota de migra√ß√£o:
-Use Postman, Insomnia ou cURL para chamar a rota que inicia a migra√ß√£o.

Usando cURL no terminal:
-curl -X POST http://localhost:3000/api/migrate

Postman/Insomnia:
-M√©todo: POST
-URL: http://localhost:3000/api/migrate
-Body: (Deixe vazio, pois a migra√ß√£o j√° est√° configurada no backend)

Se a migra√ß√£o estiver funcionando, voc√™ ver√° algo assim no terminal:
üîÑ Iniciando migra√ß√£o da cole√ß√£o "cadastro_A" para "cadastro_B"...
‚úÖ 1000 registros migrados...
‚úÖ 2000 registros migrados...
üéâ Migra√ß√£o conclu√≠da com sucesso!

E no Postman/Insomnia, a resposta deve ser:
{
  "message": "Migra√ß√£o conclu√≠da!",
  "total": 2000
}

Verificar se os dados foram migrados:
-Depois da migra√ß√£o, entre no novo MongoDB e veja se os dados chegaram:
-mongosh "mongodb://localhost:27018"
-show dbs
-use servidor_B
-show collections
-db.cadastro_B.find().limit(5)
-Se aparecerem os registros, est√° funcionando! ‚úÖüéâ